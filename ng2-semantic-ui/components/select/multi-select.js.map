{"version":3,"sources":["multi-select.ts"],"names":[],"mappings":"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","file":"multi-select.js","sourceRoot":"","sourcesContent":["import {Component, HostBinding, ElementRef, Renderer, EventEmitter, Output, Input, QueryList, AfterViewInit, ViewChildren, forwardRef, Directive} from '@angular/core';\r\nimport {SuiSelectBase} from './select-base';\r\nimport {SuiMultiSelectLabel} from './multi-select-label';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {KeyCode} from '../util/util';\r\nimport {customValueAccessorFactory, CustomValueAccessor, CustomValueAccessorHost} from '../util/custom-value-accessor';\nexport class SuiMultiSelect<T, U> extends SuiSelectBase<T, U> implements AfterViewInit, CustomValueAccessorHost<U[]> {\npublic selectedOptions:T[];\nprivate _writtenOptions:U[];\nprivate _renderedSelectedOptions:QueryList<SuiMultiSelectLabel<T>>;\nprivate _renderedSelectedSubscriptions:Subscription[];\npublic selectedOptionsChange:EventEmitter<U[]>;\n/**\n * @return {?}\n */\nprotected optionsUpdateHook() {\r\n        if (this._writtenOptions && this.searchService.options.length > 0) {\r\n            // If there were values written by ngModel before the options had been loaded, this runs to fix it.\r\n            this.selectedOptions = this._writtenOptions.map(v => this.searchService.options.find(o => v == this.valueGetter(o)));\r\n            \r\n            if (this.selectedOptions.length == this._writtenOptions.length) {\r\n                this._writtenOptions = null;\r\n            }\r\n        }\r\n    }\n/**\n * @return {?}\n */\npublic get availableOptions() {\r\n        if (this.maxSelectedReached) {\r\n            // If we have reached the maximum number of selections, then empty the results completely.\r\n            return [];\r\n        }\r\n        // Returns the search results \\ selected options.\r\n        return this.searchService.results\r\n            .filter(r => !this.selectedOptions.find(o => r == o));\r\n    }\npublic maxSelected:number;\n/**\n * @return {?}\n */\npublic get maxSelectedReached() {\r\n        if (this.maxSelected == null) {\r\n            // If there is no maximum then we can immediately return.\r\n            return false;\r\n        }\r\n        return this.selectedOptions.length == this.maxSelected;\r\n    }\nprivate _multiSelectClasses:boolean;\n/**\n * @param {?} element\n * @param {?} renderer\n */\nconstructor(element:ElementRef, renderer:Renderer) {\r\n        super(element, renderer);\r\n\r\n        this.placeholder = \"Select...\";\r\n\r\n        this.selectedOptions = [];\r\n        this.selectedOptionsChange = new EventEmitter<U[]>();\r\n\r\n        this._renderedSelectedSubscriptions = [];\r\n\r\n        this._multiSelectClasses = true;\r\n    }\n/**\n * @param {?} option\n * @return {?}\n */\npublic selectOption(option:T) {\r\n        this.selectedOptions.push(option);\r\n        this.selectedOptionsChange.emit(this.selectedOptions.map(o => this.valueGetter(o)));\r\n\r\n        // The search delay is set to the transition duration to ensure results aren't rendered as the select closes as that causes a sudden flash.\r\n        this.searchService.searchDelay = this._menu.menuTransitionDuration;\r\n        this.searchService.updateQuery(\"\");\r\n\r\n        // Automatically refocus the search input for better keyboard accessibility.\r\n        this.focusInput();\r\n    }\n/**\n * @param {?} values\n * @return {?}\n */\npublic writeValue(values:U[]) {\r\n        if (values instanceof Array) {\r\n            if (this.searchService.options.length > 0) {\r\n                // If the options have already been loaded, we can immediately match the ngModel values to options.\r\n                this.selectedOptions = values.map(v => this.findOption(this.searchService.options, v));\r\n            }\r\n            if (values.length > 0 && this.selectedOptions.length == 0) {\r\n                if (this.valueField && this.searchService.hasItemLookup) {\r\n                    // If the search service has a selected lookup function, make use of that to load the initial values.\r\n                    this.searchService.itemsLookup<U>(values)\r\n                        .then(r => this.selectedOptions = r);\r\n                }\r\n                else {\r\n                    // Otherwise, cache the written value for when options are set.\r\n                    this._writtenOptions = values;\r\n                }\r\n            }\r\n            if (values.length === 0) {\r\n                this.selectedOptions = [];\r\n            }\r\n        }\r\n    }\n/**\n * @param {?} option\n * @return {?}\n */\npublic deselectOption(option:T) {\r\n        // Update selected options to the previously selected options \\ {option}.\r\n        this.selectedOptions = this.selectedOptions.filter(so => so != option);\r\n        this.selectedOptionsChange.emit(this.selectedOptions.map(o => this.valueGetter(o)));\r\n\r\n        // Automatically refocus the search input for better keyboard accessibility.\r\n        this.focusInput();\r\n    }\n/**\n * @param {?} event\n * @return {?}\n */\npublic onQueryInputKeydown(event:KeyboardEvent) {\r\n        if (event.keyCode == KeyCode.Backspace && this.query == \"\" && this.selectedOptions.length > 0) {\r\n            // Deselect the rightmost option when the user presses backspace in the search input.\r\n            this.deselectOption(this.selectedOptions[this.selectedOptions.length - 1]);\r\n        }\r\n    }\n/**\n * @return {?}\n */\npublic ngAfterViewInit() {\r\n        // We must call this immediately as changes doesn't fire when you subscribe.\r\n        this.onSelectedOptionsRendered();\r\n        this._renderedSelectedOptions.changes.subscribe(() => this.onSelectedOptionsRendered());\r\n    }\n/**\n * @return {?}\n */\nprivate onSelectedOptionsRendered() {\r\n        // Unsubscribe from all previous subscriptions to avoid memory leaks on large selects.\r\n        this._renderedSelectedSubscriptions.forEach(rs => rs.unsubscribe());\r\n        this._renderedSelectedSubscriptions = [];\r\n\r\n        this._renderedSelectedOptions.forEach(ro => {\r\n            // Slightly delay initialisation to avoid change after checked errors. TODO - look into avoiding this!\r\n            setTimeout(() => this.initialiseRenderedOption(ro));\r\n\r\n            this._renderedSelectedSubscriptions.push(ro.onDeselected.subscribe(() => this.deselectOption(ro.value)));\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'sui-multi-select',\r\n    template: `\r\n<i class=\"dropdown icon\"></i>\r\n<!-- Multi-select labels -->\r\n<sui-multi-select-label *ngFor=\"let selected of selectedOptions;\" [value]=\"selected\"></sui-multi-select-label>\r\n<!-- Query input -->\r\n<input [hidden]=\"!isSearchable\" class=\"search\" type=\"text\" autocomplete=\"off\" [(ngModel)]=\"query\" (keydown)=\"onQueryInputKeydown($event)\" #queryInput>\r\n<!-- Placeholder text -->\r\n<div class=\"default text\" [class.filtered]=\"!!query\">{{ placeholder }}</div>\r\n<!-- Select dropdown menu -->\r\n<div class=\"menu\" suiDropdownMenu [menuAutoSelectFirst]=\"true\">\r\n    <ng-content></ng-content>\r\n    <ng-container *ngIf=\"availableOptions.length == 0 \">\r\n        <div *ngIf=\"!maxSelectedReached\" class=\"message\">{{ noResultsMessage }}</div>\r\n        <div *ngIf=\"maxSelectedReached\" class=\"message\">Max {{ maxSelected }} selections</div>\r\n    </ng-container>\r\n</div>\r\n`,\r\n    styles: [`\r\n:host input.search {\r\n    width: 12em !important;\r\n}\r\n    `]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_renderedSelectedOptions': [{ type: ViewChildren, args: [SuiMultiSelectLabel, ] },],\n'selectedOptionsChange': [{ type: Output },],\n'maxSelected': [{ type: Input },],\n'_multiSelectClasses': [{ type: HostBinding, args: ['class.multiple', ] },],\n};\n}\n\nfunction SuiMultiSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nSuiMultiSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSuiMultiSelect.ctorParameters;\n/** @type {?} */\nSuiMultiSelect.propDecorators;\n/** @type {?} */\nSuiMultiSelect.prototype.selectedOptions;\n/** @type {?} */\nSuiMultiSelect.prototype._writtenOptions;\n/** @type {?} */\nSuiMultiSelect.prototype._renderedSelectedOptions;\n/** @type {?} */\nSuiMultiSelect.prototype._renderedSelectedSubscriptions;\n/** @type {?} */\nSuiMultiSelect.prototype.selectedOptionsChange;\n/** @type {?} */\nSuiMultiSelect.prototype.maxSelected;\n/** @type {?} */\nSuiMultiSelect.prototype._multiSelectClasses;\n}\n\nexport class SuiMultiSelectValueAccessor<T, U> extends CustomValueAccessor<U[], SuiMultiSelect<T, U>> {\n/**\n * @param {?} host\n */\nconstructor(host:SuiMultiSelect<T, U>) {\r\n        super(host);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: 'sui-multi-select',\r\n    host: { '(selectedOptionsChange)': 'onChange($event)' },\r\n    providers: [customValueAccessorFactory(SuiMultiSelectValueAccessor)]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SuiMultiSelect, },\n];\n}\n\nfunction SuiMultiSelectValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nSuiMultiSelectValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSuiMultiSelectValueAccessor.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}