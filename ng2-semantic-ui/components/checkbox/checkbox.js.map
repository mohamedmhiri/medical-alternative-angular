{"version":3,"sources":["checkbox.ts"],"names":[],"mappings":"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","file":"checkbox.js","sourceRoot":"","sourcesContent":["import {Component, Directive, Input, Output, HostListener, HostBinding, EventEmitter, forwardRef} from '@angular/core';\r\nimport {CustomValueAccessorHost, customValueAccessorFactory, CustomValueAccessor} from '../util/custom-value-accessor';\nexport class SuiCheckbox implements CustomValueAccessorHost<boolean> {\nprivate _checkboxClasses:boolean;\npublic name:string;\npublic isChecked:boolean;\npublic checkChange:EventEmitter<boolean>;\npublic isDisabled:boolean;\npublic isReadonly:boolean;\n/**\n * @return {?}\n */\npublic get checkedAttribute() {\r\n        return this.isChecked ? \"\" : null;\r\n    }\n/**\n * @return {?}\n */\npublic get isDisabledAttribute() {\r\n        return this.isDisabled ? \"disabled\" : null;\r\n    }\nconstructor() {\r\n        this.isChecked = false;\r\n        this.checkChange = new EventEmitter<boolean>();\r\n\r\n        this.isDisabled = false;\r\n        this.isReadonly = false;\r\n\r\n        this._checkboxClasses = true;\r\n    }\n/**\n * @return {?}\n */\npublic onClick() {\r\n        if (!this.isDisabled && !this.isReadonly) {\r\n            this.toggle();\r\n        }\r\n    }\n/**\n * @return {?}\n */\npublic toggle() {\r\n        this.isChecked = !this.isChecked;\r\n        this.checkChange.emit(this.isChecked);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic writeValue(value:boolean) {\r\n        this.isChecked = value;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'sui-checkbox',\r\n    exportAs: 'suiCheckbox',\r\n    template: `\r\n<input class=\"hidden\"\r\n       type=\"checkbox\"\r\n       [attr.name]=\"name\"\r\n       [attr.checked]=\"checkedAttribute\"\r\n       [attr.disabled]=\"isDisabledAttribute\"\r\n       [(ngModel)]=\"isChecked\">\r\n<label>\r\n    <ng-content></ng-content>\r\n</label>\r\n`\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_checkboxClasses': [{ type: HostBinding, args: ['class.ui', ] },{ type: HostBinding, args: ['class.checkbox', ] },],\n'name': [{ type: Input },],\n'isChecked': [{ type: HostBinding, args: ['class.checked', ] },],\n'checkChange': [{ type: Output },],\n'isDisabled': [{ type: Input },],\n'isReadonly': [{ type: HostBinding, args: ['class.read-only', ] },{ type: Input },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\nfunction SuiCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nSuiCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSuiCheckbox.ctorParameters;\n/** @type {?} */\nSuiCheckbox.propDecorators;\n/** @type {?} */\nSuiCheckbox.prototype._checkboxClasses;\n/** @type {?} */\nSuiCheckbox.prototype.name;\n/** @type {?} */\nSuiCheckbox.prototype.isChecked;\n/** @type {?} */\nSuiCheckbox.prototype.checkChange;\n/** @type {?} */\nSuiCheckbox.prototype.isDisabled;\n/** @type {?} */\nSuiCheckbox.prototype.isReadonly;\n}\n\nexport class SuiCheckboxValueAccessor extends CustomValueAccessor<boolean, SuiCheckbox> {\n/**\n * @param {?} host\n */\nconstructor(host:SuiCheckbox) {\r\n        super(host);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: 'sui-checkbox',\r\n    host: { '(checkChange)': 'onChange($event)' },\r\n    providers: [customValueAccessorFactory(SuiCheckboxValueAccessor)]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SuiCheckbox, },\n];\n}\n\nfunction SuiCheckboxValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nSuiCheckboxValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSuiCheckboxValueAccessor.ctorParameters;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}