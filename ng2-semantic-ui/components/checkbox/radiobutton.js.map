{"version":3,"sources":["radiobutton.ts"],"names":[],"mappings":"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","file":"radiobutton.js","sourceRoot":"","sourcesContent":["import {Component, Directive, Input, Output, HostListener, HostBinding, EventEmitter, forwardRef} from '@angular/core';\r\nimport {CustomValueAccessorHost, customValueAccessorFactory, CustomValueAccessor} from '../util/custom-value-accessor';\nexport class SuiRadioButton<T> implements CustomValueAccessorHost<T> {\nprivate _radioClasses = true;\npublic name:string;\npublic value:T;\npublic isChecked:boolean;\npublic currentValue:T;\npublic currentValueChange:EventEmitter<T>;\npublic isDisabled:boolean;\npublic isReadonly:boolean;\n/**\n * @return {?}\n */\npublic get checkedAttribute():string {\r\n        return this.isChecked ? \"\" : null;\r\n    }\n/**\n * @return {?}\n */\npublic get isDisabledAttribute():string {\r\n        return this.isDisabled ? \"disabled\" : null;\r\n    }\nconstructor() {\r\n        this.isChecked = false;\r\n        this.currentValueChange = new EventEmitter<T>();\r\n\r\n        this.isDisabled = false;\r\n        this.isReadonly = false;\r\n\r\n        this._radioClasses = true;\r\n    }\n/**\n * @return {?}\n */\npublic onClick() {\r\n        if (!this.isDisabled && !this.isReadonly) {\r\n            this.currentValue = this.value;\r\n            this.currentValueChange.emit(this.currentValue);\r\n            this.update();\r\n        }\r\n    }\n/**\n * @return {?}\n */\npublic update() {\r\n        this.isChecked = this.currentValue == this.value;\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic writeValue(value:T) {\r\n        this.currentValue = value;\r\n        this.update();\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'sui-radio-button[ngModel]',\r\n    exportAs: 'suiRadioButton',\r\n    template: `\r\n<input class=\"hidden\"\r\n       type=\"checkbox\"\r\n       [attr.name]=\"name\"\r\n       [attr.checked]=\"checkedAttribute\"\r\n       [attr.disabled]=\"isDisabledAttribute\"\r\n       [ngModel]=\"isChecked\"\r\n       (ngModel)=\"currentValue = value\">\r\n<label>\r\n    <ng-content></ng-content>\r\n</label>\r\n`\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_radioClasses': [{ type: HostBinding, args: ['class.ui', ] },{ type: HostBinding, args: ['class.radio', ] },{ type: HostBinding, args: ['class.checkbox', ] },],\n'name': [{ type: Input },],\n'value': [{ type: Input },],\n'isChecked': [{ type: HostBinding, args: ['class.checked', ] },],\n'currentValueChange': [{ type: Output },],\n'isDisabled': [{ type: Input },],\n'isReadonly': [{ type: HostBinding, args: ['class.read-only', ] },{ type: Input },],\n'onClick': [{ type: HostListener, args: ['click', ] },],\n};\n}\n\nfunction SuiRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nSuiRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSuiRadioButton.ctorParameters;\n/** @type {?} */\nSuiRadioButton.propDecorators;\n/** @type {?} */\nSuiRadioButton.prototype._radioClasses;\n/** @type {?} */\nSuiRadioButton.prototype.name;\n/** @type {?} */\nSuiRadioButton.prototype.value;\n/** @type {?} */\nSuiRadioButton.prototype.isChecked;\n/** @type {?} */\nSuiRadioButton.prototype.currentValue;\n/** @type {?} */\nSuiRadioButton.prototype.currentValueChange;\n/** @type {?} */\nSuiRadioButton.prototype.isDisabled;\n/** @type {?} */\nSuiRadioButton.prototype.isReadonly;\n}\n\nexport class SuiRadioButtonValueAccessor<T> extends CustomValueAccessor<T, SuiRadioButton<T>> {\n/**\n * @param {?} host\n */\nconstructor(host:SuiRadioButton<T>) {\r\n        super(host);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: 'sui-radio-button',\r\n    host: { '(currentValueChange)': 'onChange($event)' },\r\n    providers: [customValueAccessorFactory(SuiRadioButtonValueAccessor)]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SuiRadioButton, },\n];\n}\n\nfunction SuiRadioButtonValueAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nSuiRadioButtonValueAccessor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSuiRadioButtonValueAccessor.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}