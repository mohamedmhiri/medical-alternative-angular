{"version":3,"sources":["accordion.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAO,WAAA,EAAa,eAAA,EAA6C,MAAA,eAAA,CAAA;AACpF,OAAO,EAAA,iBAAE,EAAiB,MAAA,mBAAA,CAAA;AAC1B,OAAO,EAAA,mBAAE,EAAmB,MAAA,qBAAA,CAAA;AAC5B;IA2BA;QACQ,qDAAqD;QACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAE1C,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IACjC,CAAC;IA3BL,sBAGK,qCAAA;QANL;;WAEG;aACH;YACQ,MAAM,CAGC,IAAA,CAAK,QAAC,CAAQ,WAAC,CAAW;QAFrC,CAAC;QACL;;;WAGG;aACH,UAAK,KAAA;YACG,IAAI,CAAC,QAAC,CAAQ,WAAC,GAAa,KAAA,CAAM;QACtC,CAAC;;;OAPA;IAYL,sBAFK,4CAAA;QAFL;;;WAGG;aACH,UAFK,QAAA;YAGG,IAAI,CAFC,QAAC,CAAQ,kBAAC,GAAoB,QAAA,CAAS;QAGhD,CAAC;;;OAAA;IAYL;;OAEG;IACH,yCAHK,GAGL;QAAA,iBAKK;QAJG,IAAI,CAHC,YAAC,EAAY,CAAE;QAKpB,4CAA4C;QAC5C,IAAI,CAHC,MAAC,CAAM,OAAC,CAAO,SAAC,CAAS,cAAM,OAAA,UAAA,CAAW,cAAM,OAAA,KAAA,CAAK,YAAC,EAAY,EAAlB,CAAkB,CAAE,EAArC,CAAqC,CAAC,CAAC;IAI/E,CAAC;IACL;;OAEG;IAJE,mCAAA,GAKL;QAAA,iBAEK;QADG,IAAI,CALC,MAAC,CAAM,OAAC,CAAO,UAAA,CAAC,IAAI,OAAA,KAAA,CAAK,QAAC,CAAQ,QAAC,CAAQ,CAAC,CAAC,EAAzB,CAAyB,CAAC,CAAC;IAMxD,CAAC;IA+BL,mBAAC;AAAD,CA9EA,AA8EC;;AAnCM,uBAAA,GAAoC;IAM3C,EALE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAMrB,QAAQ,EALE,eAAA;gBAMV,QAAQ,EALE,+BAOb;gBACG,MAAM,EALE,CAAA,gMAeX,CALC;aAMD,EALC,EAAG;CAMJ,CALC;AAMF;;GAEG;AANF,2BAAA,GAAA,cAAA,OAAA,EAQA,EARA,CAQA,CAAC;AANK,2BAAA,GAAyD;IAQhE,kBAAkB,EAPE,CAAA,EAAG,IAAA,EAAM,WAAA,EAAa,IAAA,EAAM,CAAA,UAAE,EAAU,EAAG,EAAE,EAAE,IAAA,EAAM,WAAA,EAAa,IAAA,EAAM,CAAA,iBAAE,EAAiB,EAAG,EAAE;IAQpH,aAAa,EAPE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAQhC,oBAAoB,EAPE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAM,EAAE;IAQvC,QAAQ,EAPE,CAAA,EAAG,IAAA,EAAM,eAAA,EAAiB,IAAA,EAAM,CAAA,iBAAE,EAAiB,EAAG,EAAE;CAQjE,CAPC;AAUF;IACA,gBAAgB;IAChB,YAAY,CAAC,UAAU,CAAC;IACxB;;;OAGG;IACH,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,cAAc,CAAC;IAC5B,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACxC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC;IAChC,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC;AAC9B,CAAC","file":"accordion.js","sourceRoot":"","sourcesContent":["import {Component, Input, HostBinding, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\r\nimport {SuiAccordionPanel} from './accordion-panel';\r\nimport {SuiAccordionService} from './accordion.service';\nexport class SuiAccordion implements AfterContentInit {\npublic accordionClasses:boolean;\n/**\n * @return {?}\n */\npublic get closeOthers():boolean {\r\n        return this._service.closeOthers;\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set closeOthers(value:boolean) {\r\n        this._service.closeOthers = value;\r\n    }\n/**\n * @param {?} duration\n * @return {?}\n */\npublic set transitionDuration(duration:number) {\r\n        this._service.transitionDuration = duration;\r\n    }\r\n\r\n    protected _service:SuiAccordionService;\r\n    \r\n    \r\n    protected panels:QueryList<SuiAccordionPanel>;\nconstructor() {\r\n        // Accordion service is unique to each set of panels.\r\n        this._service = new SuiAccordionService();\r\n\r\n        this.accordionClasses = true;\r\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\r\n        this.updatePanels();\r\n\r\n        // Reconnect panels after they have updated.\r\n        this.panels.changes.subscribe(() => setTimeout(() => this.updatePanels()));\r\n    }\n/**\n * @return {?}\n */\npublic updatePanels() {\r\n        this.panels.forEach(p => this._service.addPanel(p));\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'sui-accordion',\r\n    template: `\r\n<ng-content></ng-content>\r\n`,\r\n    styles: [`\r\n/* Fix for general styling issues */\r\n:host {\r\n    display: block;\r\n}\r\n\r\n/* Fix for styled border issue */\r\n:host.styled sui-accordion-panel:first-child .title {\r\n    border-top: none\r\n}\r\n`]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'accordionClasses': [{ type: HostBinding, args: ['class.ui', ] },{ type: HostBinding, args: ['class.accordion', ] },],\n'closeOthers': [{ type: Input },],\n'transitionDuration': [{ type: Input },],\n'panels': [{ type: ContentChildren, args: [SuiAccordionPanel, ] },],\n};\n}\n\nfunction SuiAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nSuiAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSuiAccordion.ctorParameters;\n/** @type {?} */\nSuiAccordion.propDecorators;\n/** @type {?} */\nSuiAccordion.prototype.accordionClasses;\n/** @type {?} */\nSuiAccordion.prototype._service;\n/** @type {?} */\nSuiAccordion.prototype.panels;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}