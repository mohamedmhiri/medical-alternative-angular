{"version":3,"sources":["accordion-panel.ts"],"names":[],"mappings":"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","file":"accordion-panel.js","sourceRoot":"","sourcesContent":["import {Component, Input, Output, EventEmitter} from '@angular/core';\r\nimport {SuiAccordionService} from './accordion.service';\r\nimport {TransitionController} from '../transition/transition-controller';\r\nimport {Transition, TransitionDirection} from '../transition/transition';\nexport class SuiAccordionPanel {\nprivate _service:SuiAccordionService;\npublic transitionController:TransitionController;\n/**\n * @param {?} service\n * @return {?}\n */\npublic set service(service:SuiAccordionService) {\r\n        this._service = service;\r\n    }\npublic isDisabled:boolean;\nprivate _isOpen:boolean;\n/**\n * @return {?}\n */\npublic get isOpen() {\r\n        return this._isOpen;\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set isOpen(value:boolean) {\r\n        // Convert to boolean (fixes false != undefined)\r\n        value = !!value;\r\n\r\n        if (value != this.isOpen) {\r\n            // Only update if the value has changed.\r\n            this._isOpen = value;\r\n            \r\n            if (value && this._service) {\r\n                // If we are opening this panel, we must close the other ones.\r\n                this._service.closeOtherPanels(this);\r\n            }\r\n            this.isOpenChange.emit(this.isOpen);\r\n        \r\n            // Cancel all current animations, and fade the contents. The direction is automatic.\r\n            this.transitionController.stopAll();\r\n            this.transitionController.animate(new Transition(\"fade\", this.transitionDuration));\r\n        }\r\n    }\n/**\n * @return {?}\n */\npublic get transitionDuration() {\r\n        if (this._service) {\r\n            // Return the service defined transition duration.\r\n            return this._service.transitionDuration;\r\n        }\r\n        // Revert to instantaneous if the service is not yet loaded.\r\n        return 0;\r\n    }\npublic isOpenChange:EventEmitter<boolean>;\nconstructor() {\r\n        this.transitionController = new TransitionController(false);\r\n\r\n        this._isOpen = false;\r\n        this.isOpenChange = new EventEmitter<boolean>(false);\r\n    }\n/**\n * @return {?}\n */\npublic toggle() {\r\n        if (!this.isDisabled) {\r\n            this.isOpen = !this.isOpen;\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: 'sui-accordion-panel',\r\n    exportAs: 'suiAccordionPanel',\r\n    template: `\r\n<!-- Title -->\r\n<div class=\"title\" [class.active]=\"isOpen\" (click)=\"toggle()\" >\r\n    <ng-content select=\"[title]\"></ng-content>\r\n</div>\r\n<!-- Content -->\r\n<div [suiCollapse]=\"!isOpen\" [collapseDuration]=\"transitionDuration\">\r\n    <div class=\"content\" [class.active]=\"isOpen\" [suiTransition]=\"transitionController\">\r\n        <ng-content select=\"[content]\"></ng-content>\r\n    </div>\r\n</div>\r\n`,\r\n    styles: [`\r\n/* Manual style as Semantic UI relies on > selector */\r\n.content {\r\n    padding: .5em 0 1em;\r\n}\r\n\r\n/* Another > selector fix */\r\n:host:first-child .title {\r\n    border-top: none;\r\n}\r\n`]\r\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'isDisabled': [{ type: Input },],\n'isOpen': [{ type: Input },],\n'isOpenChange': [{ type: Output },],\n};\n}\n\nfunction SuiAccordionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nSuiAccordionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSuiAccordionPanel.ctorParameters;\n/** @type {?} */\nSuiAccordionPanel.propDecorators;\n/** @type {?} */\nSuiAccordionPanel.prototype._service;\n/** @type {?} */\nSuiAccordionPanel.prototype.transitionController;\n/** @type {?} */\nSuiAccordionPanel.prototype.isDisabled;\n/** @type {?} */\nSuiAccordionPanel.prototype._isOpen;\n/** @type {?} */\nSuiAccordionPanel.prototype.isOpenChange;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}